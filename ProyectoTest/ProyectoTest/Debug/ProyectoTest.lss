
ProyectoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000c9e  00000d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080014e  0080014e  00000d80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002105  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9f  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f09  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00004bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000661  00000000  00000000  00004efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001329  00000000  00000000  0000555d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 04 	call	0x93a	; 0x93a <main>
  9e:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Expander_Write>:
		_delay_ms(3);
		LCD_Cmd(0x0C);
		_delay_ms(3); 
	}
	
	void Expander_Write(uint8_t data) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
		i2cSendStart();							// send start condition
  aa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
		i2cWaitForComplete();
  ae:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
		i2cSendByte(LCD16X2_WRITE); 				// send WRITE address of TMP102
  b2:	8e e4       	ldi	r24, 0x4E	; 78
  b4:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
		i2cWaitForComplete();
  b8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
		i2cSendByte( data ); 						// set TMP102 pointer register to 0 (read temperature)
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
		i2cWaitForComplete();
  c2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
		i2cSendStop();
  c6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <i2cSendStop>
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <LCD_Write>:
        s++;
    }
}
	
	
	void LCD_Write(uint8_t n) {
  ce:	cf 93       	push	r28
		n |= Rs;
  d0:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <__data_end>
  d4:	c8 2b       	or	r28, r24
		Expander_Write(n);
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <Expander_Write>
		Expander_Write(n | 0x04); //Enable
  dc:	8c 2f       	mov	r24, r28
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <Expander_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_Write+0x18>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_Write+0x1e>
		_delay_us(2);
		Expander_Write(n & 0xFB); //Not enable
  ec:	8c 2f       	mov	r24, r28
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <Expander_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9f e1       	ldi	r25, 0x1F	; 31
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Write+0x2a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Write+0x30>
  fe:	00 00       	nop
		_delay_ms(2);
	}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_Cmd>:
	
	void LCD_Cmd(uint8_t cmd) {
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
		Rs = 0;
 108:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x1>
 10c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
		LCD_Write(cmd & 0xF0);
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
		LCD_Write((cmd << 4) & 0xF0);
 116:	8c 2f       	mov	r24, r28
 118:	82 95       	swap	r24
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
	}
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_print>:
	
	void LCD_print(uint8_t LCD_Char){
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
		Rs = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__data_end+0x1>
 130:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
		LCD_Write(LCD_Char & 0xF0);
 134:	8c 2f       	mov	r24, r28
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
		LCD_Write((LCD_Char << 4) & 0xF0);
 13c:	8c 2f       	mov	r24, r28
 13e:	82 95       	swap	r24
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
	}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <LCD_string>:

#include "LCD16x2.h"

int Rs;

void LCD_string(char *s){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
    while(*s){
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	31 f0       	breq	.+12     	; 0x162 <LCD_string+0x18>
 156:	21 96       	adiw	r28, 0x01	; 1
        LCD_print(*s);//Address sube solo
 158:	0e 94 92 00 	call	0x124	; 0x124 <LCD_print>
#include "LCD16x2.h"

int Rs;

void LCD_string(char *s){
    while(*s){
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <LCD_string+0xe>
        LCD_print(*s);//Address sube solo
        s++;
    }
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <LCD_init>:
		LCD_Write(LCD_Char & 0xF0);
		LCD_Write((LCD_Char << 4) & 0xF0);
	}
	
	void LCD_init(void) {
		Expander_Write(0);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <Expander_Write>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	80 e7       	ldi	r24, 0x70	; 112
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_init+0xc>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_init+0x16>
 17e:	00 00       	nop
		_delay_ms(50);
		
		Rs = 0;
 180:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x1>
 184:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
		LCD_Write(0x30);
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
 18e:	8f ed       	ldi	r24, 0xDF	; 223
 190:	9e e2       	ldi	r25, 0x2E	; 46
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_init+0x30>
 198:	00 00       	nop
		_delay_ms(3);
		LCD_Write(0x30);
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
		LCD_Write(0x30);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
		
		LCD_Write(0x20);
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	0e 94 67 00 	call	0xce	; 0xce <LCD_Write>
		
		LCD_Cmd(0x28);
 1ac:	88 e2       	ldi	r24, 0x28	; 40
 1ae:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 1b2:	8f ed       	ldi	r24, 0xDF	; 223
 1b4:	9e e2       	ldi	r25, 0x2E	; 46
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_init+0x4e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_init+0x54>
 1bc:	00 00       	nop
		_delay_ms(3);
		LCD_Cmd(0x08);
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 1c4:	8f ed       	ldi	r24, 0xDF	; 223
 1c6:	9e e2       	ldi	r25, 0x2E	; 46
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_init+0x60>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_init+0x66>
 1ce:	00 00       	nop
		_delay_ms(3);
		LCD_Cmd(0x01);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 1d6:	8f ed       	ldi	r24, 0xDF	; 223
 1d8:	9e e2       	ldi	r25, 0x2E	; 46
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_init+0x72>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_init+0x78>
 1e0:	00 00       	nop
		_delay_ms(3);
		LCD_Cmd(0x06);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 1e8:	8f ed       	ldi	r24, 0xDF	; 223
 1ea:	9e e2       	ldi	r25, 0x2E	; 46
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_init+0x84>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_init+0x8a>
 1f2:	00 00       	nop
		_delay_ms(3);
		LCD_Cmd(0x0C);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
 1fa:	8f ed       	ldi	r24, 0xDF	; 223
 1fc:	9e e2       	ldi	r25, 0x2E	; 46
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_init+0x96>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_init+0x9c>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <read_register>:
int16_t B2;
int16_t MB;
int16_t MC;
int16_t MD;

uint16_t read_register(uint8_t reg) {
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	d8 2f       	mov	r29, r24
	
	uint8_t msb;
	uint8_t lsb;
	uint16_t out;
	
	i2cSendStart();							// send start condition
 20e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 212:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 216:	8e ee       	ldi	r24, 0xEE	; 238
 218:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 21c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( reg ); 						// set TMP102 pointer register to 0 (read temperature)
 220:	8d 2f       	mov	r24, r29
 222:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 226:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	
	i2cSendStart();							//Repeat start
 22a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 22e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_READ); 				// send WRITE address of TMP102
 232:	8f ee       	ldi	r24, 0xEF	; 239
 234:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 238:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cReceiveByte(false);					// receives one byte from the bus and ACKs it//Lo recibido es el registro de lectura
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 6d 04 	call	0x8da	; 0x8da <i2cReceiveByte>
	i2cWaitForComplete();
 242:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	msb = i2cGetReceivedByte(); 			// reads the MSB (it is a 12 bit value!)
 246:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2cGetReceivedByte>
 24a:	c8 2f       	mov	r28, r24
	i2cWaitForComplete();
 24c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStop();
 250:	0e 94 5d 04 	call	0x8ba	; 0x8ba <i2cSendStop>
	
	i2cSendStart();							// send start condition
 254:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 258:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 25c:	8e ee       	ldi	r24, 0xEE	; 238
 25e:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 262:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( reg+1 ); 						// set TMP102 pointer register to 0 (read temperature)
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8d 0f       	add	r24, r29
 26a:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 26e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
		
	i2cSendStart();							//Repeat start
 272:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 276:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_READ); 				// send WRITE address of TMP102
 27a:	8f ee       	ldi	r24, 0xEF	; 239
 27c:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 280:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cReceiveByte(false);					// receives one byte from the bus and ACKs it//Lo recibido es el registro de lectura
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 6d 04 	call	0x8da	; 0x8da <i2cReceiveByte>
	i2cWaitForComplete();
 28a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	lsb = i2cGetReceivedByte(); 			// reads the MSB (it is a 12 bit value!)
 28e:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2cGetReceivedByte>
 292:	d8 2f       	mov	r29, r24
	i2cWaitForComplete();
 294:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStop();
 298:	0e 94 5d 04 	call	0x8ba	; 0x8ba <i2cSendStop>
	out = (msb<<8) + lsb;
	return out;
 29c:	8c 2f       	mov	r24, r28
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	98 2f       	mov	r25, r24
 2a2:	88 27       	eor	r24, r24
	
}
 2a4:	8d 0f       	add	r24, r29
 2a6:	91 1d       	adc	r25, r1
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <write_register>:

void write_register(uint8_t reg, uint8_t word) {
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	d8 2f       	mov	r29, r24
 2b4:	c6 2f       	mov	r28, r22

	i2cSendStart();							// send start condition
 2b6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 2ba:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 2be:	8e ee       	ldi	r24, 0xEE	; 238
 2c0:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 2c4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( reg ); 						// set TMP102 pointer register to 0 (read temperature)
 2c8:	8d 2f       	mov	r24, r29
 2ca:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 2ce:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( word); 				// send WRITE address of TMP102
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 2d8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStop();
 2dc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <i2cSendStop>
	
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <read_pressure>:

long read_pressure(uint8_t oss) {
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	d8 2f       	mov	r29, r24
	long msb;
	uint16_t lsb;
	uint8_t xlsb;
	long out;
	
	i2cSendStart();							// send start condition
 2f0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 2f4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 2f8:	8e ee       	ldi	r24, 0xEE	; 238
 2fa:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 2fe:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( 0xF6 ); 						// set TMP102 pointer register to 0 (read temperature)
 302:	86 ef       	ldi	r24, 0xF6	; 246
 304:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 308:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStart();							//Repeat start
 30c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 310:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_READ); 				// send WRITE address of TMP102
 314:	8f ee       	ldi	r24, 0xEF	; 239
 316:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 31a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cReceiveByte(false);					// receives one byte from the bus and ACKs it//Lo recibido es el registro de lectura
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 6d 04 	call	0x8da	; 0x8da <i2cReceiveByte>
	i2cWaitForComplete();
 324:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	msb = i2cGetReceivedByte(); 			// reads the MSB (it is a 12 bit value!)
 328:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2cGetReceivedByte>
 32c:	c8 2f       	mov	r28, r24
	i2cWaitForComplete();
 32e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	
	i2cSendStart();							// send start condition
 332:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 336:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 33a:	8e ee       	ldi	r24, 0xEE	; 238
 33c:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 340:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( 0xF7 ); 						// set TMP102 pointer register to 0 (read temperature)
 344:	87 ef       	ldi	r24, 0xF7	; 247
 346:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 34a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStart();							//Repeat start
 34e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 352:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_READ); 				// send WRITE address of TMP102
 356:	8f ee       	ldi	r24, 0xEF	; 239
 358:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 35c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cReceiveByte(false);					// receives one byte from the bus and ACKs it//Lo recibido es el registro de lectura
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 6d 04 	call	0x8da	; 0x8da <i2cReceiveByte>
	i2cWaitForComplete();
 366:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	lsb = i2cGetReceivedByte(); 			// reads the MSB (it is a 12 bit value!)
 36a:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2cGetReceivedByte>
 36e:	08 2f       	mov	r16, r24
	i2cWaitForComplete();
 370:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	
	i2cSendStart();							// send start condition
 374:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 378:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_WRITE); 				// send WRITE address of TMP102
 37c:	8e ee       	ldi	r24, 0xEE	; 238
 37e:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 382:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte( 0xF8 ); 						// set TMP102 pointer register to 0 (read temperature)
 386:	88 ef       	ldi	r24, 0xF8	; 248
 388:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 38c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendStart();							//Repeat start
 390:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2cSendStart>
	i2cWaitForComplete();
 394:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cSendByte(bmp180_READ); 				// send WRITE address of TMP102
 398:	8f ee       	ldi	r24, 0xEF	; 239
 39a:	0e 94 67 04 	call	0x8ce	; 0x8ce <i2cSendByte>
	i2cWaitForComplete();
 39e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	i2cReceiveByte(false);					// receives one byte from the bus and ACKs it//Lo recibido es el registro de lectura
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 6d 04 	call	0x8da	; 0x8da <i2cReceiveByte>
	i2cWaitForComplete();
 3a8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>
	xlsb = i2cGetReceivedByte(); 			// reads the MSB (it is a 12 bit value!)
 3ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <i2cGetReceivedByte>
 3b0:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
 3b2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <i2cWaitForComplete>

	i2cSendStop();
 3b6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <i2cSendStop>
	
	out = ( (msb<<16) + (lsb<<8) + xlsb)>>(8-oss);
	return out;
 3ba:	8c 2f       	mov	r24, r28
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a0 e0       	ldi	r26, 0x00	; 0
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	dc 01       	movw	r26, r24
 3c4:	99 27       	eor	r25, r25
 3c6:	88 27       	eor	r24, r24
 3c8:	20 2f       	mov	r18, r16
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	32 2f       	mov	r19, r18
 3ce:	22 27       	eor	r18, r18
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	a1 1d       	adc	r26, r1
 3d6:	b1 1d       	adc	r27, r1
 3d8:	81 0f       	add	r24, r17
 3da:	91 1d       	adc	r25, r1
 3dc:	a1 1d       	adc	r26, r1
 3de:	b1 1d       	adc	r27, r1
 3e0:	28 e0       	ldi	r18, 0x08	; 8
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	2d 1b       	sub	r18, r29
 3e6:	31 09       	sbc	r19, r1
 3e8:	bc 01       	movw	r22, r24
 3ea:	cd 01       	movw	r24, r26
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <read_pressure+0x110>
 3ee:	95 95       	asr	r25
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	2a 95       	dec	r18
 3f8:	d2 f7       	brpl	.-12     	; 0x3ee <read_pressure+0x108>
	
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <begin_bmp180>:

void begin_bmp180(void){
	
	AC1 = read_register(0xAA);	_delay_us(500);
 404:	8a ea       	ldi	r24, 0xAA	; 170
 406:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 40a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <AC1+0x1>
 40e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <AC1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	8f ec       	ldi	r24, 0xCF	; 207
 414:	97 e0       	ldi	r25, 0x07	; 7
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <begin_bmp180+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <begin_bmp180+0x18>
 41c:	00 00       	nop
	AC2 = read_register(0xAC);	_delay_us(500);
 41e:	8c ea       	ldi	r24, 0xAC	; 172
 420:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 424:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <AC2+0x1>
 428:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <AC2>
 42c:	8f ec       	ldi	r24, 0xCF	; 207
 42e:	97 e0       	ldi	r25, 0x07	; 7
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <begin_bmp180+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <begin_bmp180+0x32>
 436:	00 00       	nop
	AC3 = read_register(0xAE);	_delay_us(500);
 438:	8e ea       	ldi	r24, 0xAE	; 174
 43a:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 43e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <AC3+0x1>
 442:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <AC3>
 446:	8f ec       	ldi	r24, 0xCF	; 207
 448:	97 e0       	ldi	r25, 0x07	; 7
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <begin_bmp180+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <begin_bmp180+0x4c>
 450:	00 00       	nop
	AC4 = read_register(0xB0);	_delay_us(500);
 452:	80 eb       	ldi	r24, 0xB0	; 176
 454:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 458:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <AC4+0x1>
 45c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <AC4>
 460:	8f ec       	ldi	r24, 0xCF	; 207
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <begin_bmp180+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <begin_bmp180+0x66>
 46a:	00 00       	nop
	AC5 = read_register(0xB2); _delay_us(500);
 46c:	82 eb       	ldi	r24, 0xB2	; 178
 46e:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 472:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <AC5+0x1>
 476:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <AC5>
 47a:	8f ec       	ldi	r24, 0xCF	; 207
 47c:	97 e0       	ldi	r25, 0x07	; 7
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <begin_bmp180+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <begin_bmp180+0x80>
 484:	00 00       	nop
	AC6 = read_register(0xB4); _delay_us(500);
 486:	84 eb       	ldi	r24, 0xB4	; 180
 488:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 48c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <AC6+0x1>
 490:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <AC6>
 494:	8f ec       	ldi	r24, 0xCF	; 207
 496:	97 e0       	ldi	r25, 0x07	; 7
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <begin_bmp180+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <begin_bmp180+0x9a>
 49e:	00 00       	nop
	B1 = read_register(0xB6); _delay_us(500);
 4a0:	86 eb       	ldi	r24, 0xB6	; 182
 4a2:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 4a6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <B1+0x1>
 4aa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <B1>
 4ae:	8f ec       	ldi	r24, 0xCF	; 207
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <begin_bmp180+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <begin_bmp180+0xb4>
 4b8:	00 00       	nop
	B2 = read_register(0xB8); _delay_us(500);
 4ba:	88 eb       	ldi	r24, 0xB8	; 184
 4bc:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 4c0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <B2+0x1>
 4c4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <B2>
 4c8:	8f ec       	ldi	r24, 0xCF	; 207
 4ca:	97 e0       	ldi	r25, 0x07	; 7
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <begin_bmp180+0xc8>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <begin_bmp180+0xce>
 4d2:	00 00       	nop
	MB = read_register(0xBA); _delay_us(500);
 4d4:	8a eb       	ldi	r24, 0xBA	; 186
 4d6:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 4da:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <MB+0x1>
 4de:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <MB>
 4e2:	8f ec       	ldi	r24, 0xCF	; 207
 4e4:	97 e0       	ldi	r25, 0x07	; 7
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <begin_bmp180+0xe2>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <begin_bmp180+0xe8>
 4ec:	00 00       	nop
	MC = read_register(0xBC); _delay_us(500);
 4ee:	8c eb       	ldi	r24, 0xBC	; 188
 4f0:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 4f4:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <MC+0x1>
 4f8:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <MC>
 4fc:	8f ec       	ldi	r24, 0xCF	; 207
 4fe:	97 e0       	ldi	r25, 0x07	; 7
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <begin_bmp180+0xfc>
 504:	00 c0       	rjmp	.+0      	; 0x506 <begin_bmp180+0x102>
 506:	00 00       	nop
	MD = read_register(0xBE); _delay_us(500);
 508:	8e eb       	ldi	r24, 0xBE	; 190
 50a:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
 50e:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <MD+0x1>
 512:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <MD>
 516:	8f ec       	ldi	r24, 0xCF	; 207
 518:	97 e0       	ldi	r25, 0x07	; 7
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <begin_bmp180+0x116>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <begin_bmp180+0x11c>
 520:	00 00       	nop
 522:	08 95       	ret

00000524 <getTemperature>:
}

long getTemperature(void){
	write_register( 0xF4, 0x2E);
 524:	6e e2       	ldi	r22, 0x2E	; 46
 526:	84 ef       	ldi	r24, 0xF4	; 244
 528:	0e 94 57 01 	call	0x2ae	; 0x2ae <write_register>
 52c:	87 e1       	ldi	r24, 0x17	; 23
 52e:	97 e4       	ldi	r25, 0x47	; 71
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <getTemperature+0xc>
 534:	00 c0       	rjmp	.+0      	; 0x536 <getTemperature+0x12>
 536:	00 00       	nop
	_delay_us(4550);
	long UT = read_register(0xF6);
 538:	86 ef       	ldi	r24, 0xF6	; 246
 53a:	0e 94 04 01 	call	0x208	; 0x208 <read_register>
	return UT;
 53e:	bc 01       	movw	r22, r24
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
}
 544:	08 95       	ret

00000546 <getPressure>:

long getPressure(uint8_t oss){
 546:	4f 92       	push	r4
 548:	5f 92       	push	r5
 54a:	6f 92       	push	r6
 54c:	7f 92       	push	r7
 54e:	8f 92       	push	r8
 550:	9f 92       	push	r9
 552:	af 92       	push	r10
 554:	bf 92       	push	r11
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24
	long B6;
	unsigned long B7;
	long X3;
	long p;
	
	long UT = getTemperature();
 566:	0e 94 92 02 	call	0x524	; 0x524 <getTemperature>
 56a:	6b 01       	movw	r12, r22
 56c:	7c 01       	movw	r14, r24
	
	write_register( 0xF4, (0x34 + (oss<<6)));
 56e:	6c 2f       	mov	r22, r28
 570:	62 95       	swap	r22
 572:	66 0f       	add	r22, r22
 574:	66 0f       	add	r22, r22
 576:	60 7c       	andi	r22, 0xC0	; 192
 578:	6c 5c       	subi	r22, 0xCC	; 204
 57a:	84 ef       	ldi	r24, 0xF4	; 244
 57c:	0e 94 57 01 	call	0x2ae	; 0x2ae <write_register>
	if(oss == 0){
 580:	c1 11       	cpse	r28, r1
 582:	07 c0       	rjmp	.+14     	; 0x592 <getPressure+0x4c>
 584:	8f e4       	ldi	r24, 0x4F	; 79
 586:	96 e4       	ldi	r25, 0x46	; 70
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <getPressure+0x42>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <getPressure+0x48>
 58e:	00 00       	nop
 590:	1d c0       	rjmp	.+58     	; 0x5cc <getPressure+0x86>
		_delay_us(4500);
	}
	else if(oss == 1){
 592:	c1 30       	cpi	r28, 0x01	; 1
 594:	39 f4       	brne	.+14     	; 0x5a4 <getPressure+0x5e>
 596:	8f e2       	ldi	r24, 0x2F	; 47
 598:	95 e7       	ldi	r25, 0x75	; 117
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <getPressure+0x54>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <getPressure+0x5a>
 5a0:	00 00       	nop
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <getPressure+0x86>
		_delay_us(7500);
	}
	else if(oss == 2){
 5a4:	c2 30       	cpi	r28, 0x02	; 2
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <getPressure+0x70>
 5a8:	8f ee       	ldi	r24, 0xEF	; 239
 5aa:	92 ed       	ldi	r25, 0xD2	; 210
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <getPressure+0x66>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <getPressure+0x6c>
 5b2:	00 00       	nop
 5b4:	0b c0       	rjmp	.+22     	; 0x5cc <getPressure+0x86>
		_delay_us(13500);
	}
	else if(oss == 3){
 5b6:	c3 30       	cpi	r28, 0x03	; 3
 5b8:	49 f4       	brne	.+18     	; 0x5cc <getPressure+0x86>
 5ba:	9f eb       	ldi	r25, 0xBF	; 191
 5bc:	2e e3       	ldi	r18, 0x3E	; 62
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	20 40       	sbci	r18, 0x00	; 0
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <getPressure+0x7a>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <getPressure+0x84>
 5ca:	00 00       	nop
		_delay_us(25500);
	}
	
	long UP = read_pressure(oss);
 5cc:	8c 2f       	mov	r24, r28
 5ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <read_pressure>
 5d2:	4b 01       	movw	r8, r22
 5d4:	5c 01       	movw	r10, r24
	
	X1 = (UT-AC6)*AC5/32768;
 5d6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <AC6>
 5da:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <AC6+0x1>
 5de:	a7 01       	movw	r20, r14
 5e0:	96 01       	movw	r18, r12
 5e2:	28 1b       	sub	r18, r24
 5e4:	39 0b       	sbc	r19, r25
 5e6:	41 09       	sbc	r20, r1
 5e8:	51 09       	sbc	r21, r1
 5ea:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <AC5>
 5ee:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <AC5+0x1>
 5f2:	0e 94 f6 05 	call	0xbec	; 0xbec <__muluhisi3>
 5f6:	2b 01       	movw	r4, r22
 5f8:	3c 01       	movw	r6, r24
 5fa:	99 23       	and	r25, r25
 5fc:	34 f4       	brge	.+12     	; 0x60a <getPressure+0xc4>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	42 0e       	add	r4, r18
 602:	2f e7       	ldi	r18, 0x7F	; 127
 604:	52 1e       	adc	r5, r18
 606:	61 1c       	adc	r6, r1
 608:	71 1c       	adc	r7, r1
 60a:	03 2e       	mov	r0, r19
 60c:	3f e0       	ldi	r19, 0x0F	; 15
 60e:	75 94       	asr	r7
 610:	67 94       	ror	r6
 612:	57 94       	ror	r5
 614:	47 94       	ror	r4
 616:	3a 95       	dec	r19
 618:	d1 f7       	brne	.-12     	; 0x60e <getPressure+0xc8>
 61a:	30 2d       	mov	r19, r0
	X2 = MC*2048/(X1+MD);
	B6 = X1+X2-4000;
 61c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <MC>
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	78 2f       	mov	r23, r24
 626:	77 0f       	add	r23, r23
 628:	77 0f       	add	r23, r23
 62a:	77 0f       	add	r23, r23
 62c:	07 2e       	mov	r0, r23
 62e:	00 0c       	add	r0, r0
 630:	88 0b       	sbc	r24, r24
 632:	99 0b       	sbc	r25, r25
 634:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <MD>
 638:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <MD+0x1>
 63c:	89 01       	movw	r16, r18
 63e:	33 0f       	add	r19, r19
 640:	22 0b       	sbc	r18, r18
 642:	33 0b       	sbc	r19, r19
 644:	a9 01       	movw	r20, r18
 646:	98 01       	movw	r18, r16
 648:	24 0d       	add	r18, r4
 64a:	35 1d       	adc	r19, r5
 64c:	46 1d       	adc	r20, r6
 64e:	57 1d       	adc	r21, r7
 650:	0e 94 d7 05 	call	0xbae	; 0xbae <__divmodsi4>
 654:	42 0e       	add	r4, r18
 656:	53 1e       	adc	r5, r19
 658:	64 1e       	adc	r6, r20
 65a:	75 1e       	adc	r7, r21
 65c:	80 ea       	ldi	r24, 0xA0	; 160
 65e:	48 1a       	sub	r4, r24
 660:	8f e0       	ldi	r24, 0x0F	; 15
 662:	58 0a       	sbc	r5, r24
 664:	61 08       	sbc	r6, r1
 666:	71 08       	sbc	r7, r1
	X1 = (B2*(B6*B6/4096))/2048;
	X2 = AC2 * B6/2048;
	X3 = X1 + X2;
 668:	a3 01       	movw	r20, r6
 66a:	92 01       	movw	r18, r4
 66c:	c3 01       	movw	r24, r6
 66e:	b2 01       	movw	r22, r4
 670:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsi3>
 674:	8b 01       	movw	r16, r22
 676:	9c 01       	movw	r18, r24
 678:	99 23       	and	r25, r25
 67a:	24 f4       	brge	.+8      	; 0x684 <getPressure+0x13e>
 67c:	01 50       	subi	r16, 0x01	; 1
 67e:	10 4f       	sbci	r17, 0xF0	; 240
 680:	2f 4f       	sbci	r18, 0xFF	; 255
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	a9 01       	movw	r20, r18
 686:	98 01       	movw	r18, r16
 688:	01 2e       	mov	r0, r17
 68a:	1c e0       	ldi	r17, 0x0C	; 12
 68c:	55 95       	asr	r21
 68e:	47 95       	ror	r20
 690:	37 95       	ror	r19
 692:	27 95       	ror	r18
 694:	1a 95       	dec	r17
 696:	d1 f7       	brne	.-12     	; 0x68c <getPressure+0x146>
 698:	10 2d       	mov	r17, r0
 69a:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <B2>
 69e:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <B2+0x1>
 6a2:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulshisi3>
 6a6:	6b 01       	movw	r12, r22
 6a8:	7c 01       	movw	r14, r24
 6aa:	99 23       	and	r25, r25
 6ac:	34 f4       	brge	.+12     	; 0x6ba <getPressure+0x174>
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	c2 0e       	add	r12, r18
 6b2:	27 e0       	ldi	r18, 0x07	; 7
 6b4:	d2 1e       	adc	r13, r18
 6b6:	e1 1c       	adc	r14, r1
 6b8:	f1 1c       	adc	r15, r1
 6ba:	0b 2e       	mov	r0, r27
 6bc:	bb e0       	ldi	r27, 0x0B	; 11
 6be:	f5 94       	asr	r15
 6c0:	e7 94       	ror	r14
 6c2:	d7 94       	ror	r13
 6c4:	c7 94       	ror	r12
 6c6:	ba 95       	dec	r27
 6c8:	d1 f7       	brne	.-12     	; 0x6be <getPressure+0x178>
 6ca:	b0 2d       	mov	r27, r0
 6cc:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <AC2>
 6d0:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <AC2+0x1>
 6d4:	a3 01       	movw	r20, r6
 6d6:	92 01       	movw	r18, r4
 6d8:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulshisi3>
 6dc:	8b 01       	movw	r16, r22
 6de:	9c 01       	movw	r18, r24
 6e0:	99 23       	and	r25, r25
 6e2:	24 f4       	brge	.+8      	; 0x6ec <getPressure+0x1a6>
 6e4:	01 50       	subi	r16, 0x01	; 1
 6e6:	18 4f       	sbci	r17, 0xF8	; 248
 6e8:	2f 4f       	sbci	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	d9 01       	movw	r26, r18
 6ee:	c8 01       	movw	r24, r16
 6f0:	07 2e       	mov	r0, r23
 6f2:	7b e0       	ldi	r23, 0x0B	; 11
 6f4:	b5 95       	asr	r27
 6f6:	a7 95       	ror	r26
 6f8:	97 95       	ror	r25
 6fa:	87 95       	ror	r24
 6fc:	7a 95       	dec	r23
 6fe:	d1 f7       	brne	.-12     	; 0x6f4 <getPressure+0x1ae>
 700:	70 2d       	mov	r23, r0
 702:	c8 0e       	add	r12, r24
 704:	d9 1e       	adc	r13, r25
 706:	ea 1e       	adc	r14, r26
 708:	fb 1e       	adc	r15, r27
	B3 = (((AC1*4+X3)<<oss)+2)/4;
	X1 = AC3*B6/8192;
	X2 = (B1*(B6*B6/4096))/65536;
	B4 = AC4*(unsigned long)(X3+32768)/32768;
 70a:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <AC4>
 70e:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <AC4+0x1>
 712:	a7 01       	movw	r20, r14
 714:	96 01       	movw	r18, r12
 716:	30 58       	subi	r19, 0x80	; 128
 718:	4f 4f       	sbci	r20, 0xFF	; 255
 71a:	5f 4f       	sbci	r21, 0xFF	; 255
 71c:	0e 94 f6 05 	call	0xbec	; 0xbec <__muluhisi3>
 720:	2b 01       	movw	r4, r22
 722:	3c 01       	movw	r6, r24
 724:	03 2e       	mov	r0, r19
 726:	3f e0       	ldi	r19, 0x0F	; 15
 728:	76 94       	lsr	r7
 72a:	67 94       	ror	r6
 72c:	57 94       	ror	r5
 72e:	47 94       	ror	r4
 730:	3a 95       	dec	r19
 732:	d1 f7       	brne	.-12     	; 0x728 <getPressure+0x1e2>
 734:	30 2d       	mov	r19, r0
	B7 = ((unsigned long)UP-B3) * (50000 >> oss);
 736:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <AC1>
 73a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <AC1+0x1>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	09 2e       	mov	r0, r25
 748:	00 0c       	add	r0, r0
 74a:	aa 0b       	sbc	r26, r26
 74c:	bb 0b       	sbc	r27, r27
 74e:	c8 0e       	add	r12, r24
 750:	d9 1e       	adc	r13, r25
 752:	ea 1e       	adc	r14, r26
 754:	fb 1e       	adc	r15, r27
 756:	0c 2e       	mov	r0, r28
 758:	04 c0       	rjmp	.+8      	; 0x762 <getPressure+0x21c>
 75a:	cc 0c       	add	r12, r12
 75c:	dd 1c       	adc	r13, r13
 75e:	ee 1c       	adc	r14, r14
 760:	ff 1c       	adc	r15, r15
 762:	0a 94       	dec	r0
 764:	d2 f7       	brpl	.-12     	; 0x75a <getPressure+0x214>
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	c8 0e       	add	r12, r24
 76a:	d1 1c       	adc	r13, r1
 76c:	e1 1c       	adc	r14, r1
 76e:	f1 1c       	adc	r15, r1
 770:	d7 01       	movw	r26, r14
 772:	c6 01       	movw	r24, r12
 774:	ff 20       	and	r15, r15
 776:	1c f4       	brge	.+6      	; 0x77e <getPressure+0x238>
 778:	03 96       	adiw	r24, 0x03	; 3
 77a:	a1 1d       	adc	r26, r1
 77c:	b1 1d       	adc	r27, r1
 77e:	b5 95       	asr	r27
 780:	a7 95       	ror	r26
 782:	97 95       	ror	r25
 784:	87 95       	ror	r24
 786:	b5 95       	asr	r27
 788:	a7 95       	ror	r26
 78a:	97 95       	ror	r25
 78c:	87 95       	ror	r24
 78e:	a5 01       	movw	r20, r10
 790:	94 01       	movw	r18, r8
 792:	28 1b       	sub	r18, r24
 794:	39 0b       	sbc	r19, r25
 796:	4a 0b       	sbc	r20, r26
 798:	5b 0b       	sbc	r21, r27
 79a:	80 e5       	ldi	r24, 0x50	; 80
 79c:	93 ec       	ldi	r25, 0xC3	; 195
 79e:	a0 e0       	ldi	r26, 0x00	; 0
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	bc 01       	movw	r22, r24
 7a4:	cd 01       	movw	r24, r26
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <getPressure+0x26a>
 7a8:	95 95       	asr	r25
 7aa:	87 95       	ror	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	ca 95       	dec	r28
 7b2:	d2 f7       	brpl	.-12     	; 0x7a8 <getPressure+0x262>
 7b4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsi3>
	if(B7<0x80000000){p = (B7*2)/B4;}
 7b8:	99 23       	and	r25, r25
 7ba:	5c f0       	brlt	.+22     	; 0x7d2 <getPressure+0x28c>
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	a3 01       	movw	r20, r6
 7c6:	92 01       	movw	r18, r4
 7c8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__udivmodsi4>
 7cc:	69 01       	movw	r12, r18
 7ce:	7a 01       	movw	r14, r20
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <getPressure+0x2a0>
	else{p = (B7/B4)*2;}
 7d2:	a3 01       	movw	r20, r6
 7d4:	92 01       	movw	r18, r4
 7d6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__udivmodsi4>
 7da:	69 01       	movw	r12, r18
 7dc:	7a 01       	movw	r14, r20
 7de:	cc 0c       	add	r12, r12
 7e0:	dd 1c       	adc	r13, r13
 7e2:	ee 1c       	adc	r14, r14
 7e4:	ff 1c       	adc	r15, r15
	X1 = (p/256)*(p/256);
 7e6:	d7 01       	movw	r26, r14
 7e8:	c6 01       	movw	r24, r12
 7ea:	ff 20       	and	r15, r15
 7ec:	24 f4       	brge	.+8      	; 0x7f6 <getPressure+0x2b0>
 7ee:	81 50       	subi	r24, 0x01	; 1
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	af 4f       	sbci	r26, 0xFF	; 255
 7f4:	bf 4f       	sbci	r27, 0xFF	; 255
 7f6:	69 2f       	mov	r22, r25
 7f8:	7a 2f       	mov	r23, r26
 7fa:	8b 2f       	mov	r24, r27
 7fc:	99 27       	eor	r25, r25
 7fe:	87 fd       	sbrc	r24, 7
 800:	9a 95       	dec	r25
	X1 = (X1 * 3038)/65536;
 802:	9b 01       	movw	r18, r22
 804:	ac 01       	movw	r20, r24
 806:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsi3>
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	ae ed       	ldi	r26, 0xDE	; 222
 810:	bb e0       	ldi	r27, 0x0B	; 11
 812:	0e 94 f6 05 	call	0xbec	; 0xbec <__muluhisi3>
 816:	4b 01       	movw	r8, r22
 818:	5c 01       	movw	r10, r24
	X2 = (-7357*p)/65536;
	p = p + (X1 + X2 + 3791)/16; //Presion en pascales
 81a:	a3 e4       	ldi	r26, 0x43	; 67
 81c:	b3 ee       	ldi	r27, 0xE3	; 227
 81e:	a7 01       	movw	r20, r14
 820:	96 01       	movw	r18, r12
 822:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulohisi3>
 826:	8b 01       	movw	r16, r22
 828:	9c 01       	movw	r18, r24
 82a:	99 23       	and	r25, r25
 82c:	24 f4       	brge	.+8      	; 0x836 <getPressure+0x2f0>
 82e:	01 50       	subi	r16, 0x01	; 1
 830:	11 09       	sbc	r17, r1
 832:	2f 4f       	sbci	r18, 0xFF	; 255
 834:	3f 4f       	sbci	r19, 0xFF	; 255
 836:	a9 01       	movw	r20, r18
 838:	77 27       	eor	r23, r23
 83a:	57 fd       	sbrc	r21, 7
 83c:	70 95       	com	r23
 83e:	67 2f       	mov	r22, r23
 840:	d5 01       	movw	r26, r10
 842:	c4 01       	movw	r24, r8
 844:	bb 20       	and	r11, r11
 846:	1c f4       	brge	.+6      	; 0x84e <getPressure+0x308>
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	af 4f       	sbci	r26, 0xFF	; 255
 84c:	bf 4f       	sbci	r27, 0xFF	; 255
 84e:	cd 01       	movw	r24, r26
 850:	bb 27       	eor	r27, r27
 852:	97 fd       	sbrc	r25, 7
 854:	b0 95       	com	r27
 856:	ab 2f       	mov	r26, r27
 858:	84 0f       	add	r24, r20
 85a:	95 1f       	adc	r25, r21
 85c:	a6 1f       	adc	r26, r22
 85e:	b7 1f       	adc	r27, r23
 860:	81 53       	subi	r24, 0x31	; 49
 862:	91 4f       	sbci	r25, 0xF1	; 241
 864:	af 4f       	sbci	r26, 0xFF	; 255
 866:	bf 4f       	sbci	r27, 0xFF	; 255
 868:	ac 01       	movw	r20, r24
 86a:	bd 01       	movw	r22, r26
 86c:	22 f4       	brpl	.+8      	; 0x876 <getPressure+0x330>
 86e:	41 5f       	subi	r20, 0xF1	; 241
 870:	5f 4f       	sbci	r21, 0xFF	; 255
 872:	6f 4f       	sbci	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	68 94       	set
 878:	13 f8       	bld	r1, 3
 87a:	75 95       	asr	r23
 87c:	67 95       	ror	r22
 87e:	57 95       	ror	r21
 880:	47 95       	ror	r20
 882:	16 94       	lsr	r1
 884:	d1 f7       	brne	.-12     	; 0x87a <getPressure+0x334>
	return p;	
 886:	cb 01       	movw	r24, r22
 888:	ba 01       	movw	r22, r20
 88a:	6c 0d       	add	r22, r12
 88c:	7d 1d       	adc	r23, r13
 88e:	8e 1d       	adc	r24, r14
 890:	9f 1d       	adc	r25, r15
	};
 892:	cf 91       	pop	r28
 894:	1f 91       	pop	r17
 896:	0f 91       	pop	r16
 898:	ff 90       	pop	r15
 89a:	ef 90       	pop	r14
 89c:	df 90       	pop	r13
 89e:	cf 90       	pop	r12
 8a0:	bf 90       	pop	r11
 8a2:	af 90       	pop	r10
 8a4:	9f 90       	pop	r9
 8a6:	8f 90       	pop	r8
 8a8:	7f 90       	pop	r7
 8aa:	6f 90       	pop	r6
 8ac:	5f 90       	pop	r5
 8ae:	4f 90       	pop	r4
 8b0:	08 95       	ret

000008b2 <i2cSendStart>:


// Send a start condition
void i2cSendStart()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 8b2:	84 ea       	ldi	r24, 0xA4	; 164
 8b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8b8:	08 95       	ret

000008ba <i2cSendStop>:


// Send a stop condition
void i2cSendStop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 8ba:	84 e9       	ldi	r24, 0x94	; 148
 8bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8c0:	08 95       	ret

000008c2 <i2cWaitForComplete>:


// Waits for the previous operation to finish
void i2cWaitForComplete()
{
	while (!(TWCR & (1<<TWINT))); //Se sale cuando se setea TWINT 
 8c2:	ec eb       	ldi	r30, 0xBC	; 188
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	88 23       	and	r24, r24
 8ca:	ec f7       	brge	.-6      	; 0x8c6 <i2cWaitForComplete+0x4>
}
 8cc:	08 95       	ret

000008ce <i2cSendByte>:

// Transmits one byte over the bus to a slave
// (Can be either an address or a value.)
void i2cSendByte(unsigned char data)
{
	TWDR = data;
 8ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
 8d2:	84 e8       	ldi	r24, 0x84	; 132
 8d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8d8:	08 95       	ret

000008da <i2cReceiveByte>:
// Receives one byte from a slave
// (Always a value; master has no address.)
// Send an ACK if you expect more data, NAK if not.
void i2cReceiveByte(bool sendAnACK)
{
	if(sendAnACK){
 8da:	88 23       	and	r24, r24
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <i2cReceiveByte+0xc>
		TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
 8de:	84 ec       	ldi	r24, 0xC4	; 196
 8e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8e4:	08 95       	ret
	}
	else{
		TWCR = (1<<TWINT)|(1<<TWEN);
 8e6:	84 e8       	ldi	r24, 0x84	; 132
 8e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8ec:	08 95       	ret

000008ee <i2cGetReceivedByte>:
// (if you are interested in it).
// It is possible to *not* call this function after a call to
// i2cReceiveByte() if you are not interested in the actual value.
unsigned char i2cGetReceivedByte(void)
{
	return TWDR;
 8ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 8f2:	08 95       	ret

000008f4 <setup_adc>:
}



void setup_adc(){
	ADMUX |= (1<<REFS0) | (0<<MUX0);// AVcc referencia, ADC0
 8f4:	ec e7       	ldi	r30, 0x7C	; 124
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	80 64       	ori	r24, 0x40	; 64
 8fc:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);//ADC on,	auto trigger enable, interrupt, /128
 8fe:	ea e7       	ldi	r30, 0x7A	; 122
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	87 60       	ori	r24, 0x07	; 7
 906:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
 908:	80 81       	ld	r24, Z
 90a:	80 68       	ori	r24, 0x80	; 128
 90c:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC0D);
 90e:	ae e7       	ldi	r26, 0x7E	; 126
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	8c 91       	ld	r24, X
 914:	81 60       	ori	r24, 0x01	; 1
 916:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADSC);
 918:	80 81       	ld	r24, Z
 91a:	80 64       	ori	r24, 0x40	; 64
 91c:	80 83       	st	Z, r24
 91e:	08 95       	ret

00000920 <valorAdc>:

}
int valorAdc(){
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
 920:	ea e7       	ldi	r30, 0x7A	; 122
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	80 64       	ori	r24, 0x40	; 64
 928:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
 92a:	80 81       	ld	r24, Z
 92c:	86 fd       	sbrc	r24, 6
 92e:	fd cf       	rjmp	.-6      	; 0x92a <valorAdc+0xa>
	return ADC;
 930:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 934:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 938:	08 95       	ret

0000093a <main>:

void setup_adc(void);
int valorAdc(void);

int main(void)
{
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
 942:	2f 97       	sbiw	r28, 0x0f	; 15
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
	    // I2C initialiZation
	TWBR = 12;									// 400 kHz at 16MHz crystal and no prescaler
 94e:	8c e0       	ldi	r24, 0x0C	; 12
 950:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR &= ~((1 << TWPS1) | (1 << TWPS0));		// prescaler 0
 954:	e9 eb       	ldi	r30, 0xB9	; 185
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	8c 7f       	andi	r24, 0xFC	; 252
 95c:	80 83       	st	Z, r24
	TWDR = 0xFF;								// sending only ones equals an idle high SDA line
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN)|							// Enable TWI-interface and release TWI pins. 
 964:	84 e0       	ldi	r24, 0x04	; 4
 966:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	(0<<TWWC);
		
	long p;
	long altura;
	
	LCD_init();
 96a:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_init>
	setup_adc();
 96e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <setup_adc>
	
	LCD_string("Hello");
 972:	85 e0       	ldi	r24, 0x05	; 5
 974:	91 e0       	ldi	r25, 0x01	; 1
 976:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_string>
	LCD_Cmd(0xC0);
 97a:	80 ec       	ldi	r24, 0xC0	; 192
 97c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Cmd>
	LCD_string("Madafackas");
 980:	8b e0       	ldi	r24, 0x0B	; 11
 982:	91 e0       	ldi	r25, 0x01	; 1
 984:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_string>
	
	struct USART_configuration config_57600_8N1 = {57600, 8, 'N', 1};
 988:	85 e0       	ldi	r24, 0x05	; 5
 98a:	e0 e0       	ldi	r30, 0x00	; 0
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	de 01       	movw	r26, r28
 990:	11 96       	adiw	r26, 0x01	; 1
 992:	01 90       	ld	r0, Z+
 994:	0d 92       	st	X+, r0
 996:	8a 95       	dec	r24
 998:	e1 f7       	brne	.-8      	; 0x992 <main+0x58>
	USART_Init(config_57600_8N1);
 99a:	49 81       	ldd	r20, Y+1	; 0x01
 99c:	5a 81       	ldd	r21, Y+2	; 0x02
 99e:	6b 81       	ldd	r22, Y+3	; 0x03
 9a0:	7c 81       	ldd	r23, Y+4	; 0x04
 9a2:	8d 81       	ldd	r24, Y+5	; 0x05
 9a4:	0e 94 26 05 	call	0xa4c	; 0xa4c <USART_Init>
	
	begin_bmp180();
 9a8:	0e 94 02 02 	call	0x404	; 0x404 <begin_bmp180>
	p = getPressure( 0 );
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 a3 02 	call	0x546	; 0x546 <getPressure>
	
	p = getPressure( 1 );
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 a3 02 	call	0x546	; 0x546 <getPressure>
	
	p = getPressure( 2 );
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	0e 94 a3 02 	call	0x546	; 0x546 <getPressure>
	
	p = getPressure( 3 );
 9be:	83 e0       	ldi	r24, 0x03	; 3
 9c0:	0e 94 a3 02 	call	0x546	; 0x546 <getPressure>
    while (1) 
    {
		int rain = valorAdc();
 9c4:	0e 94 90 04 	call	0x920	; 0x920 <valorAdc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 9c8:	4a e0       	ldi	r20, 0x0A	; 10
 9ca:	be 01       	movw	r22, r28
 9cc:	6a 5f       	subi	r22, 0xFA	; 250
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	0e 94 18 06 	call	0xc30	; 0xc30 <__itoa_ncheck>
		char buffer[10];
		itoa(rain, buffer, 10);
		if(valorAdc()<300){
 9d4:	0e 94 90 04 	call	0x920	; 0x920 <valorAdc>
 9d8:	8c 32       	cpi	r24, 0x2C	; 44
 9da:	91 40       	sbci	r25, 0x01	; 1
 9dc:	4c f4       	brge	.+18     	; 0x9f0 <main+0xb6>
			USART_Transmit_String(buffer);
 9de:	ce 01       	movw	r24, r28
 9e0:	06 96       	adiw	r24, 0x06	; 6
 9e2:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
			USART_Transmit_String(" Heavy rain\r\n");
 9e6:	86 e1       	ldi	r24, 0x16	; 22
 9e8:	91 e0       	ldi	r25, 0x01	; 1
 9ea:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
 9ee:	24 c0       	rjmp	.+72     	; 0xa38 <main+0xfe>
		}
		else if(valorAdc()<500){
 9f0:	0e 94 90 04 	call	0x920	; 0x920 <valorAdc>
 9f4:	84 3f       	cpi	r24, 0xF4	; 244
 9f6:	91 40       	sbci	r25, 0x01	; 1
 9f8:	4c f4       	brge	.+18     	; 0xa0c <main+0xd2>
			USART_Transmit_String(buffer);
 9fa:	ce 01       	movw	r24, r28
 9fc:	06 96       	adiw	r24, 0x06	; 6
 9fe:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
			USART_Transmit_String(" Moderate rain\r\n");
 a02:	84 e2       	ldi	r24, 0x24	; 36
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <main+0xfe>
		}
		else if(valorAdc()<800){
 a0c:	0e 94 90 04 	call	0x920	; 0x920 <valorAdc>
 a10:	80 32       	cpi	r24, 0x20	; 32
 a12:	93 40       	sbci	r25, 0x03	; 3
 a14:	4c f4       	brge	.+18     	; 0xa28 <main+0xee>
			USART_Transmit_String(buffer);
 a16:	ce 01       	movw	r24, r28
 a18:	06 96       	adiw	r24, 0x06	; 6
 a1a:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
			USART_Transmit_String(" Few drops\r\n");
 a1e:	85 e3       	ldi	r24, 0x35	; 53
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <main+0xfe>
		}
		else{
			USART_Transmit_String(buffer);
 a28:	ce 01       	movw	r24, r28
 a2a:	06 96       	adiw	r24, 0x06	; 6
 a2c:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
			USART_Transmit_String(" No rain\r\n");
 a30:	82 e4       	ldi	r24, 0x42	; 66
 a32:	91 e0       	ldi	r25, 0x01	; 1
 a34:	0e 94 96 05 	call	0xb2c	; 0xb2c <USART_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	99 e6       	ldi	r25, 0x69	; 105
 a3c:	28 e1       	ldi	r18, 0x18	; 24
 a3e:	81 50       	subi	r24, 0x01	; 1
 a40:	90 40       	sbci	r25, 0x00	; 0
 a42:	20 40       	sbci	r18, 0x00	; 0
 a44:	e1 f7       	brne	.-8      	; 0xa3e <main+0x104>
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <main+0x10e>
 a48:	00 00       	nop
		}
		_delay_ms(500);
    }
 a4a:	bc cf       	rjmp	.-136    	; 0x9c4 <main+0x8a>

00000a4c <USART_Init>:
//
// Call it at any time to change the USART communication parameters.
//
// Returns zero in case of success, non-zero for errors.
uint8_t USART_Init(struct USART_configuration config)
{
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	00 d0       	rcall	.+0      	; 0xa54 <USART_Init+0x8>
 a54:	00 d0       	rcall	.+0      	; 0xa56 <USART_Init+0xa>
 a56:	1f 92       	push	r1
 a58:	cd b7       	in	r28, 0x3d	; 61
 a5a:	de b7       	in	r29, 0x3e	; 62
 a5c:	49 83       	std	Y+1, r20	; 0x01
 a5e:	5a 83       	std	Y+2, r21	; 0x02
 a60:	16 2f       	mov	r17, r22
 a62:	6b 83       	std	Y+3, r22	; 0x03
 a64:	7c 83       	std	Y+4, r23	; 0x04
 a66:	8d 83       	std	Y+5, r24	; 0x05
	ubrr = Fclock/config.baudrate/16-1;
 a68:	29 81       	ldd	r18, Y+1	; 0x01
 a6a:	3a 81       	ldd	r19, Y+2	; 0x02
 a6c:	40 e0       	ldi	r20, 0x00	; 0
 a6e:	50 e0       	ldi	r21, 0x00	; 0
 a70:	60 e4       	ldi	r22, 0x40	; 64
 a72:	72 e4       	ldi	r23, 0x42	; 66
 a74:	8f e0       	ldi	r24, 0x0F	; 15
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__udivmodsi4>
 a7c:	21 50       	subi	r18, 0x01	; 1
 a7e:	31 09       	sbc	r19, r1
 a80:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ubrr+0x1>
 a84:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ubrr>
	
	UBRR0H = (unsigned char)(ubrr>>8);
 a88:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 a8c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ubrr>
 a90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable  and transmitter */
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 a94:	88 e1       	ldi	r24, 0x18	; 24
 a96:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: data, stop bit y paridad */
	
	D_bits |=(config.databits>8) ?(config.databits-2):(config.databits-5);
 a9a:	19 30       	cpi	r17, 0x09	; 9
 a9c:	28 f0       	brcs	.+10     	; 0xaa8 <USART_Init+0x5c>
 a9e:	61 2f       	mov	r22, r17
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	62 50       	subi	r22, 0x02	; 2
 aa4:	71 09       	sbc	r23, r1
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <USART_Init+0x64>
 aa8:	61 2f       	mov	r22, r17
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	65 50       	subi	r22, 0x05	; 5
 aae:	71 09       	sbc	r23, r1
 ab0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <D_bits>
 ab4:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <D_bits+0x1>
 ab8:	68 2b       	or	r22, r24
 aba:	79 2b       	or	r23, r25
 abc:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <D_bits+0x1>
 ac0:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <D_bits>
	UCSR0C |= (D_bits<<UCSZ00);
 ac4:	e2 ec       	ldi	r30, 0xC2	; 194
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	68 2b       	or	r22, r24
 ad0:	60 83       	st	Z, r22
	
	UCSR0C |= ((config.stopbits-1)<<USBS0);
 ad2:	20 81       	ld	r18, Z
 ad4:	9d 81       	ldd	r25, Y+5	; 0x05
 ad6:	89 2f       	mov	r24, r25
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	01 97       	sbiw	r24, 0x01	; 1
 adc:	88 0f       	add	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	88 0f       	add	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	82 2b       	or	r24, r18
 aea:	80 83       	st	Z, r24
	
	switch(config.parity){
 aec:	8c 81       	ldd	r24, Y+4	; 0x04
 aee:	85 34       	cpi	r24, 0x45	; 69
 af0:	31 f0       	breq	.+12     	; 0xafe <USART_Init+0xb2>
 af2:	8f 34       	cpi	r24, 0x4F	; 79
 af4:	49 f4       	brne	.+18     	; 0xb08 <USART_Init+0xbc>
		case 'N': break;
		case 'O': UCSR0C = (1<<UPM01) | (1<<UPM00);
 af6:	80 e3       	ldi	r24, 0x30	; 48
 af8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		break;
 afc:	05 c0       	rjmp	.+10     	; 0xb08 <USART_Init+0xbc>
		case 'E': UCSR0C |= (1<<UPM01);
 afe:	e2 ec       	ldi	r30, 0xC2	; 194
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	80 62       	ori	r24, 0x20	; 32
 b06:	80 83       	st	Z, r24
		break;
	}
	return 0;
}
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	0f 90       	pop	r0
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	0f 90       	pop	r0
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	08 95       	ret

00000b1c <USART_Transmit_char>:

// Transmits a single character
void USART_Transmit_char(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
 b1c:	e0 ec       	ldi	r30, 0xC0	; 192
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	90 81       	ld	r25, Z
 b22:	95 ff       	sbrs	r25, 5
 b24:	fd cf       	rjmp	.-6      	; 0xb20 <USART_Transmit_char+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 b26:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 b2a:	08 95       	ret

00000b2c <USART_Transmit_String>:



// Transmits a given string
void USART_Transmit_String(char* string)
{
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	ec 01       	movw	r28, r24
	while(*string!='\0'){
 b32:	88 81       	ld	r24, Y
 b34:	88 23       	and	r24, r24
 b36:	31 f0       	breq	.+12     	; 0xb44 <USART_Transmit_String+0x18>
 b38:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_char(*string);
 b3a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <USART_Transmit_char>


// Transmits a given string
void USART_Transmit_String(char* string)
{
	while(*string!='\0'){
 b3e:	89 91       	ld	r24, Y+
 b40:	81 11       	cpse	r24, r1
 b42:	fb cf       	rjmp	.-10     	; 0xb3a <USART_Transmit_String+0xe>
		USART_Transmit_char(*string);
		string++;
	}
}
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	08 95       	ret

00000b4a <__mulsi3>:
 b4a:	db 01       	movw	r26, r22
 b4c:	8f 93       	push	r24
 b4e:	9f 93       	push	r25
 b50:	0e 94 f6 05 	call	0xbec	; 0xbec <__muluhisi3>
 b54:	bf 91       	pop	r27
 b56:	af 91       	pop	r26
 b58:	a2 9f       	mul	r26, r18
 b5a:	80 0d       	add	r24, r0
 b5c:	91 1d       	adc	r25, r1
 b5e:	a3 9f       	mul	r26, r19
 b60:	90 0d       	add	r25, r0
 b62:	b2 9f       	mul	r27, r18
 b64:	90 0d       	add	r25, r0
 b66:	11 24       	eor	r1, r1
 b68:	08 95       	ret

00000b6a <__udivmodsi4>:
 b6a:	a1 e2       	ldi	r26, 0x21	; 33
 b6c:	1a 2e       	mov	r1, r26
 b6e:	aa 1b       	sub	r26, r26
 b70:	bb 1b       	sub	r27, r27
 b72:	fd 01       	movw	r30, r26
 b74:	0d c0       	rjmp	.+26     	; 0xb90 <__udivmodsi4_ep>

00000b76 <__udivmodsi4_loop>:
 b76:	aa 1f       	adc	r26, r26
 b78:	bb 1f       	adc	r27, r27
 b7a:	ee 1f       	adc	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	a2 17       	cp	r26, r18
 b80:	b3 07       	cpc	r27, r19
 b82:	e4 07       	cpc	r30, r20
 b84:	f5 07       	cpc	r31, r21
 b86:	20 f0       	brcs	.+8      	; 0xb90 <__udivmodsi4_ep>
 b88:	a2 1b       	sub	r26, r18
 b8a:	b3 0b       	sbc	r27, r19
 b8c:	e4 0b       	sbc	r30, r20
 b8e:	f5 0b       	sbc	r31, r21

00000b90 <__udivmodsi4_ep>:
 b90:	66 1f       	adc	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	1a 94       	dec	r1
 b9a:	69 f7       	brne	.-38     	; 0xb76 <__udivmodsi4_loop>
 b9c:	60 95       	com	r22
 b9e:	70 95       	com	r23
 ba0:	80 95       	com	r24
 ba2:	90 95       	com	r25
 ba4:	9b 01       	movw	r18, r22
 ba6:	ac 01       	movw	r20, r24
 ba8:	bd 01       	movw	r22, r26
 baa:	cf 01       	movw	r24, r30
 bac:	08 95       	ret

00000bae <__divmodsi4>:
 bae:	05 2e       	mov	r0, r21
 bb0:	97 fb       	bst	r25, 7
 bb2:	1e f4       	brtc	.+6      	; 0xbba <__divmodsi4+0xc>
 bb4:	00 94       	com	r0
 bb6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__negsi2>
 bba:	57 fd       	sbrc	r21, 7
 bbc:	07 d0       	rcall	.+14     	; 0xbcc <__divmodsi4_neg2>
 bbe:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__udivmodsi4>
 bc2:	07 fc       	sbrc	r0, 7
 bc4:	03 d0       	rcall	.+6      	; 0xbcc <__divmodsi4_neg2>
 bc6:	4e f4       	brtc	.+18     	; 0xbda <__divmodsi4_exit>
 bc8:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__negsi2>

00000bcc <__divmodsi4_neg2>:
 bcc:	50 95       	com	r21
 bce:	40 95       	com	r20
 bd0:	30 95       	com	r19
 bd2:	21 95       	neg	r18
 bd4:	3f 4f       	sbci	r19, 0xFF	; 255
 bd6:	4f 4f       	sbci	r20, 0xFF	; 255
 bd8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bda <__divmodsi4_exit>:
 bda:	08 95       	ret

00000bdc <__negsi2>:
 bdc:	90 95       	com	r25
 bde:	80 95       	com	r24
 be0:	70 95       	com	r23
 be2:	61 95       	neg	r22
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__muluhisi3>:
 bec:	0e 94 09 06 	call	0xc12	; 0xc12 <__umulhisi3>
 bf0:	a5 9f       	mul	r26, r21
 bf2:	90 0d       	add	r25, r0
 bf4:	b4 9f       	mul	r27, r20
 bf6:	90 0d       	add	r25, r0
 bf8:	a4 9f       	mul	r26, r20
 bfa:	80 0d       	add	r24, r0
 bfc:	91 1d       	adc	r25, r1
 bfe:	11 24       	eor	r1, r1
 c00:	08 95       	ret

00000c02 <__mulshisi3>:
 c02:	b7 ff       	sbrs	r27, 7
 c04:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__muluhisi3>

00000c08 <__mulohisi3>:
 c08:	0e 94 f6 05 	call	0xbec	; 0xbec <__muluhisi3>
 c0c:	82 1b       	sub	r24, r18
 c0e:	93 0b       	sbc	r25, r19
 c10:	08 95       	ret

00000c12 <__umulhisi3>:
 c12:	a2 9f       	mul	r26, r18
 c14:	b0 01       	movw	r22, r0
 c16:	b3 9f       	mul	r27, r19
 c18:	c0 01       	movw	r24, r0
 c1a:	a3 9f       	mul	r26, r19
 c1c:	70 0d       	add	r23, r0
 c1e:	81 1d       	adc	r24, r1
 c20:	11 24       	eor	r1, r1
 c22:	91 1d       	adc	r25, r1
 c24:	b2 9f       	mul	r27, r18
 c26:	70 0d       	add	r23, r0
 c28:	81 1d       	adc	r24, r1
 c2a:	11 24       	eor	r1, r1
 c2c:	91 1d       	adc	r25, r1
 c2e:	08 95       	ret

00000c30 <__itoa_ncheck>:
 c30:	bb 27       	eor	r27, r27
 c32:	4a 30       	cpi	r20, 0x0A	; 10
 c34:	31 f4       	brne	.+12     	; 0xc42 <__itoa_ncheck+0x12>
 c36:	99 23       	and	r25, r25
 c38:	22 f4       	brpl	.+8      	; 0xc42 <__itoa_ncheck+0x12>
 c3a:	bd e2       	ldi	r27, 0x2D	; 45
 c3c:	90 95       	com	r25
 c3e:	81 95       	neg	r24
 c40:	9f 4f       	sbci	r25, 0xFF	; 255
 c42:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__utoa_common>

00000c46 <__utoa_ncheck>:
 c46:	bb 27       	eor	r27, r27

00000c48 <__utoa_common>:
 c48:	fb 01       	movw	r30, r22
 c4a:	55 27       	eor	r21, r21
 c4c:	aa 27       	eor	r26, r26
 c4e:	88 0f       	add	r24, r24
 c50:	99 1f       	adc	r25, r25
 c52:	aa 1f       	adc	r26, r26
 c54:	a4 17       	cp	r26, r20
 c56:	10 f0       	brcs	.+4      	; 0xc5c <__utoa_common+0x14>
 c58:	a4 1b       	sub	r26, r20
 c5a:	83 95       	inc	r24
 c5c:	50 51       	subi	r21, 0x10	; 16
 c5e:	b9 f7       	brne	.-18     	; 0xc4e <__utoa_common+0x6>
 c60:	a0 5d       	subi	r26, 0xD0	; 208
 c62:	aa 33       	cpi	r26, 0x3A	; 58
 c64:	08 f0       	brcs	.+2      	; 0xc68 <__utoa_common+0x20>
 c66:	a9 5d       	subi	r26, 0xD9	; 217
 c68:	a1 93       	st	Z+, r26
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	79 f7       	brne	.-34     	; 0xc4c <__utoa_common+0x4>
 c6e:	b1 11       	cpse	r27, r1
 c70:	b1 93       	st	Z+, r27
 c72:	11 92       	st	Z+, r1
 c74:	cb 01       	movw	r24, r22
 c76:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <strrev>

00000c7a <strrev>:
 c7a:	dc 01       	movw	r26, r24
 c7c:	fc 01       	movw	r30, r24
 c7e:	67 2f       	mov	r22, r23
 c80:	71 91       	ld	r23, Z+
 c82:	77 23       	and	r23, r23
 c84:	e1 f7       	brne	.-8      	; 0xc7e <strrev+0x4>
 c86:	32 97       	sbiw	r30, 0x02	; 2
 c88:	04 c0       	rjmp	.+8      	; 0xc92 <strrev+0x18>
 c8a:	7c 91       	ld	r23, X
 c8c:	6d 93       	st	X+, r22
 c8e:	70 83       	st	Z, r23
 c90:	62 91       	ld	r22, -Z
 c92:	ae 17       	cp	r26, r30
 c94:	bf 07       	cpc	r27, r31
 c96:	c8 f3       	brcs	.-14     	; 0xc8a <strrev+0x10>
 c98:	08 95       	ret

00000c9a <_exit>:
 c9a:	f8 94       	cli

00000c9c <__stop_program>:
 c9c:	ff cf       	rjmp	.-2      	; 0xc9c <__stop_program>
